/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import blockcipher.BlockCipher;
import blockcipher.StringByteModifier;
import com.google.api.client.util.Base64;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javamailclient.GmailAPI;
import javax.mail.MessagingException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import signature.BigPoint;
import signature.ECDSA;
import signature.KeyGenerator;

/**
 *
 * @author user
 */
public class ComposePanel extends javax.swing.JPanel {

    byte[] key;
    byte[] cipher;
    String message;
    String attachmentPath;
    
    /**
     * Creates new form ComposePanel
     */
    public ComposePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        toTextField = new javax.swing.JTextField();
        subjectTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgTextField = new javax.swing.JTextArea();
        encryptCheckBox = new javax.swing.JCheckBox();
        keyEncryptTextField = new javax.swing.JTextField();
        keyEncryptLabel = new javax.swing.JLabel();
        openEncryptButton = new javax.swing.JButton();
        signCheckBox = new javax.swing.JCheckBox();
        signLabel = new javax.swing.JLabel();
        signTextField = new javax.swing.JTextField();
        openSignButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        encryptFromFileCheckBox = new javax.swing.JCheckBox();
        signFromFileCheckBox = new javax.swing.JCheckBox();
        generateKeyButton = new javax.swing.JButton();
        attachmentButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(675, 515));

        jLabel1.setText("To");

        jLabel2.setText("Subject");

        msgTextField.setColumns(20);
        msgTextField.setRows(5);
        jScrollPane1.setViewportView(msgTextField);

        encryptCheckBox.setText("Encrypt");
        encryptCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptCheckBoxActionPerformed(evt);
            }
        });

        keyEncryptTextField.setEnabled(false);

        keyEncryptLabel.setText("Key");
        keyEncryptLabel.setEnabled(false);

        openEncryptButton.setText("Open");
        openEncryptButton.setEnabled(false);
        openEncryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openEncryptButtonActionPerformed(evt);
            }
        });

        signCheckBox.setText("Digital Signature");
        signCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signCheckBoxActionPerformed(evt);
            }
        });

        signLabel.setText("Signature");
        signLabel.setEnabled(false);

        signTextField.setEnabled(false);

        openSignButton.setText("Open");
        openSignButton.setEnabled(false);
        openSignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSignButtonActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        encryptFromFileCheckBox.setText("From File");
        encryptFromFileCheckBox.setEnabled(false);
        encryptFromFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptFromFileCheckBoxActionPerformed(evt);
            }
        });

        signFromFileCheckBox.setText("From File");
        signFromFileCheckBox.setEnabled(false);
        signFromFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signFromFileCheckBoxActionPerformed(evt);
            }
        });

        generateKeyButton.setText("Generate Key");
        generateKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeyButtonActionPerformed(evt);
            }
        });

        attachmentButton.setText("Add Attachment");
        attachmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(attachmentButton)
                        .addGap(244, 244, 244)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(28, 28, 28)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(subjectTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                                .addComponent(toTextField)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(signFromFileCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(openSignButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encryptFromFileCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openEncryptButton))
                    .addComponent(keyEncryptTextField)
                    .addComponent(signTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(signCheckBox)
                            .addComponent(encryptCheckBox)
                            .addComponent(keyEncryptLabel)
                            .addComponent(signLabel)
                            .addComponent(generateKeyButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encryptCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keyEncryptLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keyEncryptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(openEncryptButton)
                            .addComponent(encryptFromFileCheckBox))
                        .addGap(48, 48, 48)
                        .addComponent(signCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(signLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(signTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(openSignButton)
                            .addComponent(signFromFileCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateKeyButton)
                        .addGap(0, 141, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(attachmentButton)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void encrypt(byte[] plain) {
        cipher = BlockCipher.cipherBlockChaining(plain, StringByteModifier.md5Hash(key));
    }
    
    private boolean isFileEncrypt() {
        return encryptCheckBox.isSelected() && encryptFromFileCheckBox.isEnabled() 
                && encryptFromFileCheckBox.isSelected();
    }
    
    private boolean isFileSign() {
        return signCheckBox.isSelected() && signFromFileCheckBox.isEnabled()
                && signFromFileCheckBox.isSelected();
    }
    
    private void openEncryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openEncryptButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int retrieval = chooser.showOpenDialog(null);
        if (retrieval == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            Path path = Paths.get(file.getAbsolutePath());
            try {
                key = Files.readAllBytes(path);
                keyEncryptTextField.setText(key.toString());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_openEncryptButtonActionPerformed

    private void encryptCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptCheckBoxActionPerformed
        // TODO add your handling code here:
        boolean b = encryptCheckBox.isSelected();
        keyEncryptLabel.setEnabled(b);
        keyEncryptTextField.setEnabled(b);
        encryptFromFileCheckBox.setEnabled(b);
        fromFileEncrypt(encryptFromFileCheckBox.isSelected());
    }//GEN-LAST:event_encryptCheckBoxActionPerformed

    private void signCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signCheckBoxActionPerformed
        // TODO add your handling code here:
        boolean b = signCheckBox.isSelected();
        signLabel.setEnabled(b);
        signTextField.setEnabled(b);
        signFromFileCheckBox.setEnabled(b);
        fromFileSign(signFromFileCheckBox.isSelected());
    }//GEN-LAST:event_signCheckBoxActionPerformed

    private void encryptFromFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptFromFileCheckBoxActionPerformed
        // TODO add your handling code here:
        fromFileEncrypt(encryptFromFileCheckBox.isSelected());
    }//GEN-LAST:event_encryptFromFileCheckBoxActionPerformed

    private void signFromFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signFromFileCheckBoxActionPerformed
        // TODO add your handling code here:
        fromFileSign(signFromFileCheckBox.isSelected());
    }//GEN-LAST:event_signFromFileCheckBoxActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        System.out.println("Klik!");
        sendMessage();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void generateKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeyButtonActionPerformed
        KeyGenerator key = new KeyGenerator();
        key.generate();
        JFileChooser chooser = new JFileChooser();
        int retrieval = chooser.showSaveDialog(null);
        if (retrieval == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String save = key.privatekey.toString();
            try {
                FileOutputStream fos = new FileOutputStream(file.getAbsolutePath());
                fos.write(save.getBytes());
                fos.close();
            } catch (Exception ex) {
            }
        }
        
        chooser = new JFileChooser();
        retrieval = chooser.showSaveDialog(null);
        if (retrieval == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String save = key.publickey.getX().toString();
            save = save + '\n' + key.publickey.getY().toString();
            try {
                FileOutputStream fos = new FileOutputStream(file.getAbsolutePath());
                fos.write(save.getBytes());
                fos.close();
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_generateKeyButtonActionPerformed

    private void openSignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSignButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int retrieval = chooser.showOpenDialog(null);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Private file", "pri");
        chooser.setFileFilter(filter);
        if (retrieval == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            Path path = Paths.get(file.getAbsolutePath());
            try {
                String s = new String(Files.readAllBytes(path));
                signTextField.setText(s);
            } catch (IOException ex) {
                
            }
        }
    }//GEN-LAST:event_openSignButtonActionPerformed

    private void attachmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachmentButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int retrieval = chooser.showOpenDialog(null);
        if (retrieval == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            attachmentPath = file.getAbsolutePath();
        }
    }//GEN-LAST:event_attachmentButtonActionPerformed
    
    private void generateMessage() {
        if (signCheckBox.isSelected()) {
            String s = msgTextField.getText();
            s = s + "\n\n";
            
            ECDSA ecdsa = new ECDSA();
            BigPoint signature = ecdsa.generate(s, new BigInteger(signTextField.getText()));
            
            s = s + "<ds>" + signature.getX().toString(16) + "\n" + signature.getY().toString(16) + "</ds>";
            msgTextField.setText(s);
        }
        if (encryptCheckBox.isSelected()) {
            System.out.println("Dienkrip");
            generateKey();
            encrypt(msgTextField.getText().getBytes());
            message = Base64.encodeBase64String(cipher);
        } else {
            System.out.println("Gak dienkrip");
            message = msgTextField.getText();
        }
    }
    
    private void generateKey() {
        if (isFileEncrypt()) {
            
        } else {
            key = keyEncryptTextField.getText().getBytes();
       }
    }
    
    public void sendMessage() {
        System.out.println("Kirim email!");
        generateMessage();
        System.out.println("Generate?");
        String from = GmailAPI.USER_EMAIL;
        String to = toTextField.getText();
        String subject = subjectTextField.getText();
        try {
            GmailAPI.sendEmail(to, from, subject, message);
            /*System.out.println("Key : " + key);
            System.out.println("Message : " + message);
            byte[] b = Base64.decodeBase64(message);
            System.out.println("Panjang key md5 : " + StringByteModifier.md5Hash(key).length);
            byte[] dekrip = BlockCipher.decryptCBC (b, StringByteModifier.md5Hash(key));
            System.out.println("Dekrip : " + new String(dekrip));*/
        } catch (MessagingException ex) {
            Logger.getLogger(ComposePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ComposePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void fromFileEncrypt(boolean b) {
        if (encryptFromFileCheckBox.isEnabled()) {
            keyEncryptTextField.setEnabled(!b);
            openEncryptButton.setEnabled(b);
        } else {
            keyEncryptTextField.setEnabled(false);
            openEncryptButton.setEnabled(false);
        }
    }
    
    private void fromFileSign(boolean b) {
        if (signFromFileCheckBox.isEnabled()) {
            signTextField.setEnabled(!b);
            openSignButton.setEnabled(b);
        } else {
            signTextField.setEnabled(false);
            openSignButton.setEnabled(false);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attachmentButton;
    private javax.swing.JCheckBox encryptCheckBox;
    private javax.swing.JCheckBox encryptFromFileCheckBox;
    private javax.swing.JButton generateKeyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel keyEncryptLabel;
    private javax.swing.JTextField keyEncryptTextField;
    private javax.swing.JTextArea msgTextField;
    private javax.swing.JButton openEncryptButton;
    private javax.swing.JButton openSignButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JCheckBox signCheckBox;
    private javax.swing.JCheckBox signFromFileCheckBox;
    private javax.swing.JLabel signLabel;
    private javax.swing.JTextField signTextField;
    private javax.swing.JTextField subjectTextField;
    private javax.swing.JTextField toTextField;
    // End of variables declaration//GEN-END:variables
}
